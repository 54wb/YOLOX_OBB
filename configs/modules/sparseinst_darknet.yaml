# depth_multiple: 0.33  # model depth multiple
# width_multiple: 0.50  # layer channel multiple
depth_multiple: 1.0  # model depth multiple
width_multiple: 1.0  # layer channel multiple

# YOLOv5 backbone
backbone:
  # [from, number, module, args]
  [[-1, 1, Conv, [64, 6, 2, 2, kwargs(act_func=nn.ReLU)]],  # 0-P1/2
   [-1, 1, Conv, [128, 3, 2, kwargs(act_func=nn.ReLU)]],  # 1-P2/4
   [-1, 3, C3, [128, kwargs(act_func=nn.ReLU)]],
   [-1, 1, Conv, [256, 3, 2, kwargs(act_func=nn.ReLU)]],  # 3-P3/8
   [-1, 9, C3, [256, kwargs(act_func=nn.ReLU)]],
   [-1, 1, Conv, [512, 3, 2, kwargs(act_func=nn.ReLU)]],  # 5-P4/16
   [-1, 9, C3, [512, kwargs(act_func=nn.ReLU)]],
   [-1, 1, Conv, [1024, 3, 2, kwargs(act_func=nn.ReLU)]],  # 7-P5/32
   [-1, 1, SPP, [1024, [5, 9, 13], kwargs(act_func=nn.ReLU)]],
   [-1, 3, C3, [1024, False, kwargs(act_func=nn.ReLU)]],  # 9
  ]

# YOLOX_OBB head
head:
  [[-1, 1, nn.Conv2d, [256, 1, 1]], # 10
   [-1, 1, PPM, [256, [1, 2, 3, 6], "kwargs(act_func=nn.ReLU, inplace=True)"]], # 11
   [-1, 1, nn.Conv2d, [256, 3, 1, 1]], # 12
   [-1, 1, nn.Upsample, [None, 2, 'nearest']], # 13
   [-1, 1, nn.Upsample, [None, 2, 'nearest']], # 14

   [6, 1, nn.Conv2d, [256, 1, 1]], # 15
   [[-1, 13], 1, Sum, [1]],  # 16
   [-1, 1, nn.Conv2d, [256, 3, 1, 1]], # 17
   [-1, 1, nn.Upsample, [None, 2, 'nearest']], # 18

   [4, 1, nn.Conv2d, [256, 1, 1]], # 19
   [[-1, 18], 1, Sum, [1]],  # 20
   [-1, 1, nn.Conv2d, [256, 3, 1, 1]], # 21

   [[-1, 18, 14], 1, Concat, [1]], # 22
   [-1, 1, nn.Conv2d, [256, 3, 1, 1]], # 23
   # sparse decoder
   # inst branch
   [-1, 1, Coordinates, [absolute]], # 24
   [-1, 1, InstConv, [256, 4, 3, 1, 1, kwargs(inplace=True)]], # 25
   # mask branch
   [25, 1, InstConv, [256, 4, 3, 1, 1, kwargs(inplace=True)]], # 26
   [-1, 1, nn.Conv2d, [128, 1, 1]], # 27
  ]

detect:
  [[[25, 27], 1, SparseInstDetect, []]] # Detect(P3, P4, P5)